#!/bin/python3
# TODO: mkdir if not made and cd into dir

import os, subprocess

def startExercise(class_name, dir_name):
    filename = class_name + ".java"
    template = "/home/ramel/Dropbox/fall2021/CompSci/template.java"

    cmd = ["cp", "--no-clobber", template, filename]
    sed_cmd = ["sed", "-i", "s/ClassName/{0}/g".format(filename.rstrip('.java')), filename]
    nvim_cmd = ["kitty", "nvim", filename]

    subprocess.run(cmd)
    subprocess.run(sed_cmd)
    finish = subprocess.Popen(nvim_cmd)

    # if int(input("1 = Simple | 2 = Complex\n")) == 1:
    #     test(filename)
    #     return True 
    # else: 
    #     complexTest(filename)
    #     return False

def test(filename):
    case = ""
    test_file = "test_" + filename.rstrip('.java')
    subprocess.run(["touch", test_file])

    with open(test_file, 'a') as file:
        while case != "0\n":
            case = input("Type a line of input to test\n or type 0\n") + "\n"
            if case != "0\n" and case != "":
                file.write(case)
    inputs = subprocess.check_output("cat " + test_file, shell=True).decode('utf-8')
    inputs_list = inputs.split('\n')
    inputs_list.pop()

    for choice in inputs_list:
        print("--------- Testing Next Case ---------")
        testcmd = "echo " + choice + " | java " + filename
        print("Test Cases: " + choice)
        print("Solution")
        # testcmd = ["echo", choice, "|", "java", filename]
        subprocess.call(testcmd, shell = True)


def complexTest(filename):
    # should incorporate a more complex textfile to handle diff inputs per line
    pass

def zipper(dir_name):
    subprocess.run(["mkdir", dir_name])
    subprocess.run(["mv", "Exercise*", dir_name])
    cmd = ["zip", "-r", dir_name, ".zip ", dir_name.rstrip("_")]
    subprocess.run(cmd)
    return True

def main():
    ex_number= input("Exercise Number: ")
    class_name = "Exercise" + ex_number
    dir_name = "/home/ramel/Dropbox/fall2021/CompSci/RamelTranquille_Assignment_" #+ input("HW number: ")
    opt = 1
    opt = int(input("1 - Start Ex\n2 - Zip\n3 - Skip to Test\n-> "))

    #OPTION1 - start ex and testing environment
    if opt == 1:
        x = startExercise(class_name, dir_name)
    #OPTION2 - zip for submission
    elif opt == 2:
        zipper(dir_name)
    elif opt == 3:
        test(class_name+".java")
        # Skip to test 



if __name__ == "__main__":
    main()
