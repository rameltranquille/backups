#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Requires dmenu and exo-open

import os
import sys
import argparse
import subprocess
import re

from collections import namedtuple
from distutils.spawn import find_executable

def main():
    args   = get_args()
    scheme = dmenu_setup(args)
    choice = dmenu_input(scheme)
    take_action(scheme, choice)

def get_args():
    """Return arguments from stdin or print usage instructions."""
    parser = argparse.ArgumentParser(description='Simple dmenu launcher for notes and application shortcuts.')
    group = parser.add_mutually_exclusive_group()

    group.add_argument('--notes', action='store_true',
                        help='Opens a text/markdown note from a given directory with exo-open.')
    group.add_argument('--search', action='store_true',
                        help='Quick search and launch from a given directory with exo-open.')

    if not len(sys.argv) > 1:
        parser.print_help()
        sys.exit(1)

    return parser.parse_args()


def dmenu_setup(args):
    """Setup dmenu font, color and size based on user's input."""
    scheme = namedtuple(
                        'dmenu',
                         [
                          'target',             # notes / search
                          'prefix',             # location prefix (base dir)
                          'suffix',             # file extension to look for
                          'font',               # dmenu font name and size
                          'nb','nf','sb','sf',  # dmenu color:
                                                #   n=normal / s=selected,
                                                #   b=background, f=foreground
                         ])

    dmenu = ""
    if args.notes:
        dmenu = scheme(
                    target='notes',
                    prefix=os.path.expanduser('~/Dropbox/'),
                    suffix="",
                    font='JetBrains Mono:light:size=14',
                    nb='#465A65', nf='#F2F3D9', sb='#9ece6a', sf='#12100E',
                   )
    if args.search:
        dmenu = scheme(
                    target='search',
                    prefix=os.path.expanduser('~/docs/'),
                    suffix="",
                    font='JetBrains Mono:medium:size=14',
                    nb='#465A65', nf='#F2F3D9', sb='#7aa2f7', sf='#12100E',
                    #sb="#429ea6"
                   )
    
    # check_dir_exist(dmenu)
    return dmenu

def dmenu_input(scheme):
    """Builds dmenu list of options and returns the value selected by user."""
    choices = []
    for basedir, dirs , files in os.walk(scheme.prefix, followlinks=True):
        dirs.sort(reverse=True)
        files.sort(reverse=True)

        dirsubpath = basedir[len(scheme.prefix):].lstrip('/')
        for f in files:
            if f.endswith(scheme.suffix):
                full_path = os.path.join(dirsubpath, f.replace(scheme.suffix, '', -1))
                choices += [full_path]

    args = ["-fn", scheme.font, \
            "-nb", scheme.nb, \
            "-nf", scheme.nf, \
            "-sb", scheme.sb, \
            "-sf", scheme.sf, \
            "-g", "1", \
            "-l", "10", \
            "-p", "Open", \
            "-i" ]
    dmenu = subprocess.Popen(['dmenu'] + args,
                             stdin=subprocess.PIPE,
                             stderr=subprocess.PIPE,
                             stdout=subprocess.PIPE)

    choice_lines = '\n'.join(map(str, choices))
    choice, errors = dmenu.communicate(choice_lines.encode('utf-8'))

    if dmenu.returncode not in [0, 1] \
       or (dmenu.returncode == 1 and len(errors) != 0):
        print("'{} {}' returned {} and error:\n{}"
              .format(['dmenu'], ' '.join(args), dmenu.returncode,
                      errors.decode('utf-8')))
        sys.exit(1)

    choice = choice.decode('utf-8').rstrip()

    return (scheme.prefix + "/" + choice + scheme.suffix) if choice in choices else sys.exit(1)

def take_action(scheme, choice):
    if (scheme.target == "notes"):
        run_subprocess('exo-open "{}"'.format(choice))

    if (scheme.target == "apps") or (scheme.target == "search"):
        run_subprocess('exo-open "{}"'.format(choice))

def run_subprocess(cmd):
    """Handler for shortening subprocess execution."""
    subprocess.Popen(cmd, stdin =subprocess.PIPE,
                          stderr=subprocess.PIPE,
                          stdout=subprocess.PIPE,
                          shell=True,)

if __name__ == "__main__":
    main()
